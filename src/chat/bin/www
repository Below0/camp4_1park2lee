#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Upgrade HTTP server to socket.io server
 */

var io = require('socket.io')(server);
// namespace /chat에 접속한다.


var chat = io.of('/chat').on('connection', function(socket) {
  
  var room = socket.handshake.query.room;
  var user = socket.handshake.query.user;
  
  socket.join(room);
  chat.to(room).emit('chat enter', { "name" : user });


  socket.on('chat message', function(data){
    //console.log('message from client: ', data);

    var user = socket.user = data.user;
    var room = socket.room = data.room;
    var msg = socket.msg = data.msg;

    // room에 join한다
    socket.join(room);
    // room에 join되어 있는 클라이언트에게 메시지를 전송한다
    chat.to(room).emit('chat message', {"name" : user, "msg" : msg });
  });

});

server.listen(3000, function() {
  console.log('Socket IO server listening on port 3000');
});

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Database connection - MongoDB
 */
var mongoose = require('mongoose');
const mongoosePW = require("../config/mongoDB.json") //PW는 개인정보이므로 따로 관리하도록 하겠습니다.


let db = mongoose.connection;
db.on('error', console.error);
db.once('open', function(){
    console.log("Connected to mongod server");
});

mongoose.connect('mongodb+srv://pjuyeon25:'+mongoosePW.mongoosePW+'@smilegate-h0ytv.mongodb.net/hunmin?retryWrites=true&w=majority', {useUnifiedTopology: true , useNewUrlParser: true });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
